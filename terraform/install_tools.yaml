---
- name: Setup Kubernetes Tools
  hosts: all
  become: yes
  vars:
    cluster_arn: "{{ EKS_CLUSTER_ARN }}"
    aws_access_key_id: "{{ AWS_ACCESS_KEY_ID }}"
    aws_secret_access_key: "{{ AWS_SECRET_ACCESS_KEY }}"
    aws_region: "{{ AWS_REGION }}"
    key_name: "{{KEY_NAME}}"

  tasks:
    - name: Install required packages
      yum:
        name:
          - unzip
          - git
          - docker
          - jq
        state: latest

    - name: Install kubectl
      get_url:
        url: "https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/kubectl"
        mode: '0755'

    - name: Install aws-iam-authenticator
      get_url:
        url: "https://amazon-eks.s3.us-west-2.amazonaws.com/1.26.4/2023-05-11/bin/linux/amd64/aws-iam-authenticator"
        dest: "/usr/local/bin/aws-iam-authenticator"
        mode: '0755'

    - name: Install eksctl
      block:
        - name: Get OS name
          command: uname -s
          register: os_name
          changed_when: false
        - name: Download eksctl
          get_url:
            url: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_{{ os_name.stdout }}_amd64.tar.gz"
            dest: "/tmp/eksctl.tar.gz"
            validate_certs: no
        - name: Extract eksctl
          unarchive:
            src: "/tmp/eksctl.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes

    - name: Download AWS CLI v2
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
      become: no

    - name: Unzip AWS CLI v2 package
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/"
        remote_src: yes
      become: no

    - name: Install AWS CLI v2
      command: "/tmp/aws/install"

    - name: Install Helm
      block:
        - name: Download Helm
          get_url:
            url: "https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz"
            dest: "/tmp/helm.tar.gz"
        - name: Extract Helm
          unarchive:
            src: "/tmp/helm.tar.gz"
            dest: "/tmp/"
            remote_src: yes
        - name: Move Helm to bin directory
          command: mv /tmp/linux-amd64/helm /usr/local/bin/helm

    - name: Add Helm stable repository
      command:
        cmd: "helm repo add stable https://charts.helm.sh/stable"
      become: no

    - name: Add ingress-nginx Helm repository
      command:
        cmd: "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
      become: no

    - name: Update Helm repositories
      command:
        cmd: "helm repo update"
      become: no

    - name: Configure AWS settings
      command:
        cmd: "aws configure set {{ item.name }} {{ item.value }}"
      loop:
        - { name: 'aws_access_key_id', value: '{{ aws_access_key_id }}' }
        - { name: 'aws_secret_access_key', value: '{{ aws_secret_access_key }}' }
        - { name: 'region', value: '{{ aws_region }}' }
      become: no

    - name: Update kubeconfig
      command:
        cmd: "aws eks update-kubeconfig --region {{ aws_region }} --name {{ cluster_arn.split('/')[-1] }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      become: no

    - name: Add AWS EBS CSI Driver Helm repository
      command: helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
      become: no
      register: repo_added
      failed_when: "'already exists' not in repo_added.stderr and repo_added.rc != 0"

    - name: Update Helm repositories
      command: helm repo update
      become: no

    - name: Check if Helm chart for AWS EBS CSI Driver is installed
      command: helm list -f aws-ebs-csi-driver
      register: helm_list
      ignore_errors: true
      become: no

    - name: Install AWS EBS CSI Driver using Helm
      command: helm install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver -n kube-system
      ignore_errors: true
      become: no

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Update all packages
      yum:
        name: '*'
        state: latest
      become: yes

    - name: Clone specific branch of the repository
      git:
        repo: 'https://github.com/hyperverseglobalconsulting/gitlab_k8s.git'
        dest: '~/gitlab_k8s'
        version: main
        depth: 1 # Shallow clone, gets only the latest revision
      become: no

    - name: Install Python packages from requirements.txt
      pip:
        requirements: ~/gitlab_k8s/terraform/requirements.txt
        executable: pip3
      become: no

    - name: Create ingress-nginx namespace
      command:
        cmd: kubectl create namespace ingress-nginx
      ignore_errors: yes
      become: no

    - name: Install ingress-nginx using Helm in ingress-nginx namespace
      command:
        cmd: helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx
      become: no

    - name: Get the ELB name associated with ingress-nginx
      command: kubectl get svc -n ingress-nginx ingress-nginx-controller -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}'
      become_user: ec2-user
      register: elb_hostname_result
      until: elb_hostname_result.stdout != ""
      retries: 30 # retry up to 30 times
      delay: 10   # wait 10 seconds between each retry
      become: no

    - name: Add GitLab Helm Chart Repository
      command:
        cmd: helm repo add gitlab https://charts.gitlab.io/
      register: helm_repo
      become: no

    - name: Update Helm repositories
      command: helm repo update
      become: no

    - name: Generate GitLab Helm Values YAML from template
      command:
        cmd: "cat ~/gitlab_k8s/terraform/gitlab-values.yaml.template"
      register: values_template_content
      changed_when: false
      when: elb_hostname_result.stdout != ""
      become: no

    - name: Replace HOSTNAME in template
      copy:
        dest: /tmp/values.yaml
        content: "{{ values_template_content.stdout | replace('{{ ELB_HOSTNAME }}', elb_hostname_result.stdout) }}"
      when: elb_hostname_result.stdout != ""
      become: no

    - name: Install GitLab using Helm with custom values
      command:
        cmd: helm install gitlab gitlab/gitlab -f /tmp/values.yaml
      become: no

    - name: Check GitLab Web Service
      shell: kubectl get svc | grep gitlab-webservice
      register: service_status
      changed_when: false
      become: no

    - name: Get GitLab version from Helm
      shell: helm list -n default -o json | jq -r '.[] | select(.name=="gitlab") | .app_version'
      register: gitlab_version_result
      become: no

    - name: Set GitLab version
      set_fact:
        gitlab_version: "{{ gitlab_version_result.stdout }}"
      become: no

    - name: Check if GitLab Runner Helm Chart is already installed
      command: helm list -n default | grep gitlab-runner
      register: helm_list_result
      ignore_errors: true
      changed_when: false
      become: no

    - name: Install GitLab Runner Helm Chart
      command: helm install gitlab-runner gitlab/gitlab-runner -n default
      when: helm_list_result.rc != 0
      become: no

    - name: Get the GitLab Runner registration token from GitLab
      uri:
        url: https://YOUR-GITLAB-DOMAIN/api/v4/projects/YOUR_PROJECT_ID/access_tokens
        method: GET
        headers:
          Private-Token: "YOUR_ADMIN_OR_PROJECT_ACCESS_TOKEN"
        return_content: yes
        body_format: json
      register: gitlab_response
      become: no

    - name: Register GitLab Runner
      command: >
        kubectl run -i --tty --rm debug --image=debian -- bash -c 
        "apt-get update && apt-get install -y curl && 
        curl --request POST 'https://YOUR-GITLAB-DOMAIN/api/v4/runners' 
        --form 'token={{ gitlab_response.json.token }}' 
        --form 'description=gitlab-runner'"
      when: gitlab_response is changed
      become: no

    - name: Generate Ingress YAML from template
      command:
        cmd: "cat ~/gitlab_k8s/api-routes/ingress.yaml.template"
      register: template_content
      changed_when: false
      when: elb_hostname_result.stdout != ""
      become: no

    - name: Replace HOSTNAME in template
      copy:
        dest: "~/gitlab_k8s/api-routes/ingress.yaml"
        content: "{{ template_content.stdout | replace('{{ HOSTNAME }}', elb_hostname_result.stdout) }}"
      when: elb_hostname_result.stdout != ""
      become: no

    # Assuming you want to apply this ingress after creation
    - name: Apply the Ingress to the Kubernetes Cluster
      command: kubectl apply -f ~/gitlab_k8s/api-routes/ingress.yaml
      when: elb_hostname_result.stdout != ""
      become: no

    - debug:
        msg:
          - "GitLab Web UI credentials - Username: test, Password: test"
          - "GitLab Web Service: {{ service_status.stdout }}"
          - "Load Balancer DNS Name: {{ elb_hostname_result.stdout }}"

